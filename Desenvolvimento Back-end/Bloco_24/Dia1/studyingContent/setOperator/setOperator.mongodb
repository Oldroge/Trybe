// The set operator change the value in the specific field.
// If the field doesnt exist, it creates a new field with the value specified.
// Case specified fields with dot notation the embedded documents it will create to supply 
// the field path;
// Follow the example above:
use conteudo_trybe;
db.products.insertOne({
  _id: 100,
  sku: "abc123",
  quantity: 250,
  instock: true,
  reorder: false,
  details: { model: "14Q2", make: "xyz" },
  tags: [ "apparel", "clothing" ],
  ratings: [ { by: "ijk", rating: 4 } ]
})


// Example 1: Changing fields on the first level (top-level):
db.products.update(
  { _id: 100 },
  { $set: {
      quantity: 500,
      details: { model: "14Q3", make: "xyz" },
      tags: [ "coats", "outerwear", "clothing" ]
    }
  }
);
// For the fields that matches with the field _id that be equals 100, the example above will
// update the quantity, details and tags fields;

//Example 2: Changing the fields in embedded documents;
// To change fields inside a subdocument, you should use the dote notation concept seen during 
// the find() operations;
db.products.update(
  { _id: 100 },
  { $set: { "details.make": "zzz" } }
);
// The query above change field 'make' inside the subdocument 'details' that field _id be equals 
// 100;

// Example 3: Change values in arrays
db.products.update(
  { _id: 100 },
  { $set: {
      "tags.1": "rain gear",
      "ratings.0.rating": 2
    }
  }
);
// Arrays are very important in the mongoDBs data modeling. The query above, will set the tags
// field in the array index 1, and rating field in the first element (index 0) of the array
//ratings;
