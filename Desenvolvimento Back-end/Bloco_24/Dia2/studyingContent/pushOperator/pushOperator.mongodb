// The $push operator add a value to array. If the field doesnt exists, the push creates a new one.
/// Syntax:
 { $push: { <campo1>: <valor1>, ... } }

 // Together the $push operator, can use whats is knowing by modifiers.
 // Follow the example:
 $each: // add many values to an array
 $slice: // limit the elemnts inside and array. The $each operator is required
 $sort: // Order the array elements. The $each operator is required
 $position: // Especify the element position that is being insert in array. Also required the
 // $each operator, if position dont were especify, the push set the element at the of the array;;

 // The order which the push happen:
 IMPORTANT: // Doesnt matter what order set the modifiers, the proccess that happen the push
 // is the same way.

 1. // Change the array to add the elements in the right position;
 2. // Apply the ($sort) order if specified;
 3. // Limit the array ($slice) if specified;
 4. // Store the array.

 // Follow some examples using the operator $push with modifiers:
 // I'm using a db to practice:
 use sales;
db.supplies.updateOne(
  { _id: 1 },
  {
    $push: {
      items: {
        "name": "notepad",
        "price":  35.29,
        "quantity": 2,
      },
    },
  },
  { upsert: true },
);
// Watch: For I dont need to write a query only to insert de document, were used the upsert condition
IMPORTANT: // tHE upsert condition dont change the order that push works;

// The result about above operation is like this:
{
    _id : 1,
    items : [
        {
            "name" : "notepad",
            "price" : 35.29,
            "quantity" : 2,
        },
    ],
}

// Adding multiplies values in the array:
// Now to add multiplies values in the same array we will need the $push operator with
// the $each modifier, follow the example:
db.supplies.updateOne(
  {},
  {
    $push: {
      items: {
    $each: [
          {
            "name": "pens",
            "price": 56.12,
            "quantity": 5,
          },
          {
            "name": "envelopes",
            "price": 19.95,
            "quantity": 8,
          },
        ],
      },
    },
  },
  { upsert: true },
);

// The result about the operation above look like this:
{
    _id : 1,
    items : [
        {
            "name" : "notepad",
            "price" : 35.29,
            "quantity" : 2,
        },
        {
            "name" : "pens",
            "price" : 56.12,
            "quantity" : 5,
        },
        {
            "name" : "envelopes",
            "price" : 19.95,
            "quantity" : 8,
        },
    ],
}

// Using multiply modifiers:
// Together with $push operator we can use different modifiers at the same time, follow:
db.supplies.updateOne(
  { _id: 1 },
  {
    $push: {
      items: {
    $each: [
          {
            "name" : "notepad",
            "price" : 35.29,
            "quantity" : 2,
          },
          {
            "name": "envelopes",
            "price": 19.95,
            "quantity": 8,
          },
          {
            "name": "pens",
            "price": 56.12,
            "quantity": 5,
          },
        ],
sort: { quantity: -1 },
slice: 2,
      },
    },
  },
  { upsert: true },
);

// With this operation the $push operator will set each item in the array with the $each
// modifier. So the $sort operator will order the array by decreasing order, finaly, the slice
// limit array only the first two values; 


// The operation above will look like this:
{
  _id : 1,
  items : [
    {
      "name" : "envelopes",
      "price" : 19.95,
      "quantity" : 8,
    },
    {
      "name" : "pens",
      "price" : 56.12,
      "quantity" : 5,
    },
  ],
}
